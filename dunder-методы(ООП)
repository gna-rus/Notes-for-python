import datetime
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.archiv_list = []
        self.iter_value = 0

    def __str__(self):
        return f"This class have X={self.x} Y={self.y}"

    def __repr__(self):
        return f'Vector({self.x}, {self.y})'

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector(x, y)

    def __getattribute__(self, item):
        if item == "z":
            raise AttributeError("Неподходящий атрибут") #срабатывает ошибка и автоматически переходим в __getattr__
        else:
            return object.__getattribute__(self, item)

    def __getattr__(self, item):
        return f"Error!!!"

    def __setattr__(self, key, value):
        if key == "z":
            print("Такаого атрибута нет. Вектор на плоскости на не в пространстве")
        else:
            return object.__setattr__(self, key, value)

    def __delattr__(self, item):
        if item in ["x", "y"]:
            setattr(self, item, 0)
        else:
            object.__delattr__(self, item)

    def __call__(self, value):
        self.archiv_list.append(value)
        return f"К архиву добавлено значение {value}"

    def __iter__(self):
        return self

    def __next__(self):
        while self.iter_value < self.y:
            self.iter_value += self.x
            if self.x <= self.iter_value < self.y:
                return self.iter_value
            raise StopIteration


a = Vector(2, 4)
b = Vector(3, 11)
c = a + b
print(c) #__str__
print(f"{c = }") # __repr__
print(c.y) # __getattribute__
print(c.z) # __getattribute__ -> __getattr__
c.x = 321 #__setattr__
print(c)
c.z = 101 #__setattr__
del c.x # __delattr__
print(c)
c.e = 1000
print(c.e)

c(111)    #__call__ (позволяет с классмо работать как с простой функцией)
c("aaaa")
print(c.archiv_list)

iter_test = Vector(13,60) # __iter__ __next__ (без next метод iter не работает корректно)
print(iter_test.__next__())
for num in iter_test:
    print(num)

