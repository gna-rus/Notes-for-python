# Иногда нужно реализовать класс, который позволяет создавать только один экземпляр. 
# Этот тип класса широко известен как "Singleton". В этой ситуации удобен метод .__new__(), 
# потому что он может помочь ограничить количество экземпляров, которые может иметь данный класс. 
# Примечание. Большинство опытных разработчиков утверждают, что не нужно реализовывать шаблон проектирования "Singleton" 
# в Python, если уже нет рабочего класса и нужно добавить функциональность шаблона поверх него. 
# В остальных случаях можно использовать константу уровня модуля, чтобы получить ту же функциональность "Singleton" 
# без необходимости писать относительно сложный класс.

class Singleton:
    _instance = None
    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

a = Singleton()
b = Singleton()
print(a is b)
