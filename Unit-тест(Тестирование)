# Тестируемый код:
# def is_prime(p: int) -> bool:
#     if not isinstance(p, int):
#         raise TypeError('The number P must be an integer type')
#     elif p < 2:
#         raise ValueError('The number P must be greater than one')
#     elif p > 100_000_000:
#         print('If the number P is prime, the check may take a long time. Working...')
#     for i in range(2, p):
#         if p % i == 0:
#             return False
#     return True

# Unit-тест
import io
import unittest
from unittest.mock import patch
from TestGB import is_prime

class TestPrime(unittest.TestCase):
    def test_is_prime(self):
        self.assertFalse(is_prime(42))
        self.assertTrue(is_prime(73))

    def test_type(self):
        self.assertRaises(TypeError, is_prime, 3.14)

    def test_value(self):
        with self.assertRaises(ValueError):
            is_prime(-100)
            is_prime(1)

    @patch('sys.stdout', new_callable=io.StringIO) # декоратор для перехвата сообщения
    def test_warning_false(self, mock_stdout):
        self.assertFalse(is_prime(100_000_001))
        self.assertEqual(mock_stdout.getvalue(), 'If the number P is prime, the check may '
                                                 'take a long time. Working...\n')

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_warning_true(self, mock_stdout):
        self.assertTrue(is_prime(100_000_007))
        self.assertEqual(mock_stdout.getvalue(), 'If the number P is prime, the check may '
                                                 'take a long time. Working...\n')

if __name__ == '__main__':
    unittest.main()
