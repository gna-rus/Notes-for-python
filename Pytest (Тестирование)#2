import pytest


class NegativeValueError(ValueError):
    pass


class Rectangle:
    def __init__(self, width, height=None):
        if width <= 0:
            raise NegativeValueError(f'Ширина должна быть положительной, а не {width}')
        self._width = width
        if height is None:
            self._height = width
        else:
            if height <= 0:
                raise NegativeValueError(f'Высота должна быть положительной, а не {height}')
            self._height = height

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, value):
        if value > 0:
            self._width = value
        else:
            raise NegativeValueError(f'Ширина должна быть положительной, а не {value}')

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self, value):
        if value > 0:
            self._height = value
        else:
            raise NegativeValueError(f'Высота должна быть положительной, а не {value}')

    def perimeter(self):
        return 2 * (self._width + self._height)

    def area(self):
        return self._width * self._height

    def __add__(self, other):
        width = self._width + other._width
        perimeter = self.perimeter() + other.perimeter()
        height = perimeter / 2 - width
        return Rectangle(width, height)

    def __sub__(self, other):
        if self.perimeter() < other.perimeter():
            self, other = other, self
        width = abs(self._width - other._width)
        perimeter = self.perimeter() - other.perimeter()
        height = perimeter / 2 - width
        return Rectangle(width, height)



from unittest import TestCase


class TestRectangle(TestCase):
    emp1 = Rectangle(5)
    emp2 = Rectangle(3, 4)

    def test_width(self):
        assert self.emp1.width == 5

    def test_height(self):
        assert self.emp2.height == 4

    def test_perimeter(self):
        assert self.emp1.perimeter() == 20

    def test_area(self):
        assert self.emp2.area() == 12

    def test_addition(self):
        emp3 = Rectangle(5, 3)
        emp4 = Rectangle(1, 4)
        emp5 = emp3 + emp4
        assert emp5.width == 6
        assert emp5.height == 7

    def test_negative_width(self):
        # тест на срабатывание ошибки. Если сработала - то все хорошо
        with pytest.raises(NegativeValueError):
            emp5 = Rectangle(-5)

    def test_negative_height(self):
        with pytest.raises(NegativeValueError):
            emp5 = Rectangle(5, -4)

    def test_set_width(self):
        emp5 = Rectangle(5)
        emp5.width = 10
        assert emp5.width == 10

    def test_set_negative_width(self):
        with pytest.raises(NegativeValueError):
            emp5 = Rectangle(5)
            emp5.width = -10

    def test_set_height(self):
        emp5 = Rectangle(3, 4)
        emp5.width = 6
        assert emp5.width == 6

    def test_set_negative_height(self):
        with pytest.raises(NegativeValueError):
            emp5 = Rectangle(3, 4)
            emp5.width = -6

    def test_subtraction(self):
        emp6 = Rectangle(10, 4)
        emp7 = Rectangle(1, 3)
        emp8 = emp6 - emp7
        assert emp8.width == 9
        assert emp8.height == 1

    def test_subtraction_negative_result(self):
        with pytest.raises(NegativeValueError):
            emp6 = Rectangle(3, 4)
            emp7 = Rectangle(10, 1)
            emp8 = emp6 - emp7


    def test_subtraction_same_perimeter(self):
        emp6 = Rectangle(5, 1)
        emp7 = Rectangle(4, 3)

        emp8 = emp6 - emp7
        # Специально генерирую ошибку
        assert emp8.width == 1
        assert emp8.height == 7.0

