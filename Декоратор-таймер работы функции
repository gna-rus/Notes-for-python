import functools, time

def timer(iters=1):
    # iters - количество вызовов функции
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            total = 0
            for i in range(iters):
                start = time.perf_counter() # возвращает значение в плоть до долей секунд
                value = func(*args, **kwargs) # реализуем переданную функцию
                end = time.perf_counter()
                total += end - start # общее время работы всех вызовов функции
            print(f'Среднее время выполнения {func.__name__}: {round(total/iters, 4)} сек.')
            print(f'На {iters} вызовов {func.__name__} было затрачено : {total} сек.')
            print()
            return value
        return wrapper
    return decorator

@timer(10)
def list_test(num = 10000000):
    list1 = [i for i in range(num)]
    sum1 = sum(list1)
    return sum1


@timer(10)
def iter_test(num = 10000000):
    iter1 = iter(i for i in range(num))
    sum2 = sum(iter1)
    return sum2

res1 = list_test()
res2 = iter_test()
print("____")
print(res1)
print(res2)
